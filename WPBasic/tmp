using System;
using System.Collections.Generic;
using System.IO;
using System.Xml.Serialization;
using Newtonsoft.Json;

public class FileIOHelper
{
    public static void SaveToJson<T>(List<T> list, string filePath)
    {
        string json = JsonConvert.SerializeObject(list);
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            writer.Write(json);
        }
    }

    public static List<T> LoadFromJson<T>(string filePath)
    {
        using (StreamReader reader = new StreamReader(filePath))
        {
            string json = reader.ReadToEnd();
            return JsonConvert.DeserializeObject<List<T>>(json);
        }
    }

    public static void SaveToBinary<T>(List<T> list, string filePath)
    {
        using (FileStream fileStream = new FileStream(filePath, FileMode.Create))
        {
            var binaryFormatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
            binaryFormatter.Serialize(fileStream, list);
        }
    }

    public static List<T> LoadFromBinary<T>(string filePath)
    {
        using (FileStream fileStream = new FileStream(filePath, FileMode.Open))
        {
            var binaryFormatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter();
            return (List<T>)binaryFormatter.Deserialize(fileStream);
        }
    }
}

// Beispielverwendung:
public class MainViewModel
{
    public void SaveDataToXml<T>(List<T> data, string filePath)
    {
        FileIOHelper.SaveToXml(data, filePath);
    }

    public List<T> LoadDataFromXml<T>(string filePath)
    {
        return FileIOHelper.LoadFromXml<T>(filePath);
    }
}

// Main Methode zum Testen
class Program
{
    static void Main()
    {
        List<int> intList = new List<int> { 1, 2, 3, 4, 5 };
        string xmlFilePath = "data.xml";
        string jsonFilePath = "data.json";
        string binaryFilePath = "data.dat";

        // XML
        FileIOHelper.SaveToXml(intList, xmlFilePath);
        List<int> loadedIntListFromXml = FileIOHelper.LoadFromXml<int>(xmlFilePath);

        // JSON
        FileIOHelper.SaveToJson(intList, jsonFilePath);
        List<int> loadedIntListFromJson = FileIOHelper.LoadFromJson<int>(jsonFilePath);

        // Binary
        FileIOHelper.SaveToBinary(intList, binaryFilePath);
        List<int> loadedIntListFromBinary = FileIOHelper.LoadFromBinary<int>(binaryFilePath);
    }
}
